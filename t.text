<!DOCTYPE html>
<html lang="fa">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="../images/128.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="../images/128.png" />
    <title>SprachSpark - Trainingsbox</title>
    <link rel="stylesheet" href="../css/font.css" />
       <!-- <link rel="stylesheet" href="../css/box2.css?v=1.1" /> -->
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
    <style>
        :root {
  --bg: #1a1b27;
  --accent: #f1c40f;
  --card-bg: #2a2f4f;
  --card-back-bg: #3b3e6b57;
  --muted: #34495e;
  --node-default: #ceaf39;
  --node-learned: #0bba74;
  --node-not-learned: #8a222299;
  --node-0: var(--node-not-learned);
  --node-50: var(--node-default);
  --node-100: var(--node-learned);
  --box-bg: #182236;
  --shadow: 0 4px 4px rgba(0, 0, 0, 0.4);
  --gradient-bg: #1a1b27;
}

html,
body {
  min-height: 100%;
  margin: 0;
}
body {
  background: var(--gradient-bg);
  color: var(--accent);
  font-family: "iranyekanwebregular", Arial, Helvetica, sans-serif;
  padding: 0;
  direction: rtl;
  user-select: none;
  text-shadow: 1px 1px 4px rgb(0 0 0 / 98%);
}
h1 {
  text-align: center;
  color: var(--accent);
  font-size: 1.8em;
  background: #182236;
  padding: 20px 0;
  width: 100%;
  margin: 0 auto 1px auto;
  border-bottom: 4px solid var(--accent);
  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.4);
  max-width: 800px;
  font-weight: 300;
  margin-top: 20px;
}
.container {
  max-width: 800px;
  width: 90%;
  margin: 0 auto 20px auto;
  position: relative;
  padding-top: 20px;
}
.path-container {
  position: relative;
  width: 100%;
  height: auto;
  min-height: 100vh;
  display: block;
  padding-top: 5px;
  border-radius: 8px;
}
.group-container {
  position: relative;
  width: 100%;
  height: auto;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding-top: 5px;
  border-radius: 8px;
}
.group-box {
  width: 100%;
  min-height: 100px;
  background-color: var(--box-bg);
  border-radius: 12px;
  margin-bottom: 20px;
  padding: 24px;
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  gap: 15px;
  transition: height 0.3s ease;
  box-shadow: var(--shadow);
  border: 1px solid #2d40655e;
  direction: ltr;
}
.group-title {
  text-align: left;
  color: #143f93;
  font-size: 1.8em;
  font-weight: bold;
  text-shadow: 2px 2px 6px #000000;
  margin-left: 10px;
  width: 100%;
  margin-bottom: 10px;
}
.group-node {
  position: relative;
  width: 123px;
  height: 57px;
  background: #295cc242;
  border-radius: 10px 0px 0px 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #81abff;
  font-size: 1.1em;
  cursor: pointer;
  z-index: 10;
  box-shadow: -1px 3px 4px 0px rgba(0, 0, 0, 0.4);
  text-shadow: 1px 1px 3px #000000;
  border: solid 1px #1059e985;
}
.group-node:hover {
  color: #cfddfa;
}
.box {
  width: 100%;
  min-height: 100px;
  background-color: var(--box-bg);
  border-radius: 12px;
  margin-bottom: 20px;
  padding: 24px;
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: center;
  gap: 15px;
  transition: height 0.3s ease;
  box-shadow: var(--shadow);
  border: 1px solid #2d406580;
  direction: ltr;
}
.box-title {
  text-align: left;
  color: var(--accent);
  font-size: 1.8em;
  font-weight: bold;
  text-shadow: 2px 2px 6px #000000;
  margin-left: 10px;
}
.node {
  position: relative;
  width: 38px;
  height: 36px;
  background: linear-gradient(45deg, var(--node-default), #b3b315);
  border-radius: 40% 0% 40% 40%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #fff;
  font-size: 0.9em;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease, opacity 0.5s ease,
    box-shadow 0.3s ease;
  z-index: 10;
  box-shadow: -1px 3px 4px 0px rgba(0, 0, 0, 0.4);
  text-shadow: 1px 1px 3px #000000;
}
.node:hover {
  color: #060606;
}
.node.node-100 {
  background: #1cb71145;
  border: solid 1px #42ff365c;
  box-shadow: 0px 4px 4px 0px rgb(0 0 0 / 67%);
  color: #14ff76;
}
.node.node-50 {
  background: #fff00442;
  border: solid 1px #ffe80f80;
  box-shadow: 0px 4px 4px 0px rgb(0 0 0 / 67%);
  color: #f6ff57;
}
.node.node-0 {
  background: #ff474717;
  color: #ff5069;
  border: solid 1px #e3415930;
}
.node.node-0:hover {
  color: #f9bac3;
}
.node.node-50:hover {
  color: #f7fba0;
}
.node.node-100:hover {
  color: #84f8b5;
}
.node-counter {
  position: absolute;
  top: -5px;
  right: -5px;
  width: 15px;
  height: 15px;
  background-color: #ffffffc7;
  color: #000000;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.7em;
  font-weight: bold;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  display: none;
  text-shadow: 0px 0px 0px #00000094;
}
.node-counter.visible {
  display: flex;
}
.flashcard-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  z-index: 100;
  opacity: 0;
  transition: opacity 0.5s ease;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  pointer-events: none;
}
.flashcard-popup.active {
  opacity: 1;
  pointer-events: auto;
}
.flashcard-popup .flashcard {
  width: 80vw;
  max-width: 320px;
  height: auto;
  margin: 0;
  position: relative;
  transform: none;
  left: auto;
  top: auto;
}
.selection-buttons {
  display: flex;
  justify-content: space-around;
  width: 100%;
  margin-top: 10px;
  gap: 10px;
}
.selection-btn {
  color: #ffffff;
  border: none;
  padding: 6px 24px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 1em;
  transition: background-color 0.2s ease, transform 0.2s ease,
    box-shadow 0.2s ease;
  box-shadow: var(--shadow);
  width: 32%;
  text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.5);
}
.selection-btn.level-0 {
  background: rgb(45 37 55);
  border: solid 1px #ff608085;
  color: #ff6985;
}
.selection-btn.level-50 {
  background: rgb(84 87 41);
  border: solid 1px #dfb41ac9;
  color: #f2ff00;
}
.selection-btn.level-100 {
  background: rgb(26 75 44);
  border: solid 1px #0aeb68a1;
  color: #6aff98;
}
.selection-btn:hover {
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
}
.color-a1 {
  color: #00ff88;
}
.color-a2 {
  color: #d3ff02;
}
.flashcard {
  border-radius: 12px;
  padding: 8px;
  margin: 10px auto;
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.5);
  width: 320px;
  max-width: 320px;
  height: auto;
  position: relative;
  transition: transform 0.5s ease, opacity 0.5s ease;
  perspective: 1000px;
  z-index: 1;
  touch-action: pan-y;
  cursor: grab;
  border: solid 2px #30417c29;
  box-sizing: border-box;
  background: linear-gradient(135deg, #2a2f4f66 0%, #1e22354f 100%);
}
.flashcard.dragging {
  cursor: grabbing;
  transition: none !important;
}
.flashcard-inner {
  position: relative;
  width: 100%;
  height: auto;
  min-height: 300px;
  background: #2a32619c;
  border-radius: 12px;
  transition: transform 0.6s ease;
  transform-style: preserve-3d;
  border: solid 1px #718ee369;
}
.flashcard.flipped .flashcard-inner {
  transform: rotateY(180deg);
}
.flashcard-front,
.flashcard-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}
.flashcard-back {
  transform: rotateY(180deg);
}
.item-top {
  position: absolute;
  top: 8px;
  right: 8px;
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 8px;
  direction: rtl;
}
.item-top .filename {
  font-size: 0.8em;
  background: #82873e45;
  padding: 3px 7px 0px 7px;
  border-radius: 6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  color: eef324;
  text-align: center;
}
.item-top .type {
  font-size: 0.9em;
  background: linear-gradient(45deg, #289dad, #3bc4d4);
  padding: 4px 8px;
  border-radius: 6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  color: #79fffd;
  text-align: center;
}
.translate {
  font-size: 1.2em;
  color: #c5fff7;
  text-align: center;
  margin: 10px auto;
  padding: 12px 8px;
  border-radius: 8px;
  width: 90%;
  text-shadow: 1px 1px 4px rgb(0 0 0 / 98%);
}
.sound-container {
  position: relative;
  direction: ltr;
  text-align: center;
  width: 95%;
  padding: 15px 0;
  height: auto;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  top: 15px;
}
.sound-container .sound {
  font-size: 1.2em;
  color: #d8efff;
  cursor: pointer;
  padding: 5px 5px;
  margin: auto;
  border-radius: 8px;
  width: 90%;
  text-shadow: 1px 1px 4px rgb(0 0 0 / 98%);
}
.sound-container .sound.pink-text {
  color: #da4c93;
}
.sound-container .sound.blue-text {
  color: #304dff;
}
.sound-container .sound.green-text {
  color: #07c84a;
}
.sound-container .sound .subject {
  color: #6cff01;
}
.sound-container .sound .verb {
  color: #00d5ff;
}
.sound-container .sound .object {
  color: #fffc00;
}
.sound-container .sound .adverb {
  color: #ffae00;
}
.sound-container .sound .aux-verb {
  color: #cb6bf9;
}
.sound-container .sound .verb_part1 {
  color: #00d5ff;
}
.sound-container .sound .verb_part2 {
  color: #00d5ff;
}
.sound-container audio {
  display: none;
}
.sound-container .ctrl-bottom {
  position: relative;
  bottom: auto;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 95%;
  margin: 8px auto 0;
  padding: 0 5px;
  box-sizing: border-box;
  height: 40px;
}
.sound-container button.play-btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  padding: 4px 10px;
  background: linear-gradient(45deg, #28134b00, #3c1e6b00);
  border: none;
  border-radius: 8px;
  font-size: 1em;
  font-family: sans-serif;
  cursor: pointer;
  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.3);
}
.play-btn:hover {
  background: linear-gradient(45deg, #0056b3, #1e90ff);
  box-shadow: 0px 1px 1px rgb(193, 190, 190);
}
.play-btn svg {
  width: 22px;
  height: 22px;
  fill: #0f3eeb;
}
.root-icon {
  position: absolute;
  top: 12px;
  left: 8px;
  color: #4157de;
  font-size: 1em;
  cursor: pointer;
  z-index: 5;
  padding: 2px;
  border-radius: 50%;
  background: #2a315cc7;
  transition: background-color 0.2s ease, transform 0.2s ease;
  width: 20px;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  box-shadow: 0px 1px 2px rgb(0 0 0 / 49%);
  text-shadow: 1px 1px 4px rgb(0 0 0 / 9%);
}
.root-icon:hover {
  background: #353d75c7;
  transform: scale(1.02);
}
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}
.modal.show {
  opacity: 1;
  pointer-events: auto;
}
.modal-content {
  background: #1d2940f2;
  margin: auto;
  padding: 30px 20px 10px 20px;
  border-radius: 12px;
  max-width: 500px;
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.5);
  animation: fadeInScale 0.3s ease-out forwards;
  color: #ecf0f1;
  direction: rtl;
  font-size: 0.9em;
  position: relative;
  text-align: right;
}
#modalRootContent::-webkit-scrollbar {
  width: 4px;
}
#modalRootContent::-webkit-scrollbar-track {
  background: #34495e;
  border-radius: 10px;
}
#modalRootContent::-webkit-scrollbar-thumb {
  background: #495f95;
  border-radius: 10px;
}
#modalRootContent::-webkit-scrollbar-thumb:hover {
  background: #7799ed;
}
#modalRootHeader {
  color: #0043ff;
  text-align: left;
  direction: ltr;
  font-size: 1.2rem;
  border-radius: 6px;
  padding: 6px;
}
#modalRootContent {
  white-space: pre-line;
  line-height: 1.8;
  max-height: 60vh;
  overflow: auto;
  font-size: 1.1em;
  background: #161f310f;
  border-radius: 10px;
  padding: 10px;
  color: #cccccc;
}
.celebration {
  display: block;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: linear-gradient(45deg, #7448f1cc, #24d90e94);
  color: #fff;
  padding: 30px;
  border-radius: 15px;
  text-align: center;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
  z-index: 1000;
  animation: bounce 0.5s ease-in-out;
  font-family: "Arial", sans-serif;
}

.group-parent-title {
  text-align: center;
  color: #8a8fc5b5;
  font-size: 2.1em;
  margin-left: 10px;
  width: 100%;
}

@keyframes bounce {
  0% {
    transform: translate(-50%, -50%) scale(0.5);
    opacity: 0;
  }
  50% {
    transform: translate(-50%, -50%) scale(1.2);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
  }
}
@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}
.modal-content.hide {
  animation: fadeOutScale 0.3s ease-in forwards;
}
@keyframes fadeOutScale {
  from {
    opacity: 1;
    transform: scale(1);
  }
  to {
    opacity: 0;
    transform: scale(0.9);
  }
}
.close-button {
  color: var(--accent);
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 28px;
  cursor: pointer;
  transition: color 0.2s ease;
}
.close-button:hover,
.close-button:focus {
  color: #e67e22;
}
.back-btn {
  background: linear-gradient(45deg, #101735, #1e2a44);
  color: #4d79ff;
  border: none;
  padding: 6px 24px;
  border-radius: 0px 0px 12px 12px;
  cursor: pointer;
  font-size: 0.9em;
  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.4);
  transition: background-color 0.3s ease, transform 0.2s ease;
  margin: 0 auto 20px auto;
  display: block;
  width: 100%;
  text-align: center;
  margin-top: -20px;
}
.back-btn:hover {
  background: linear-gradient(45deg, #131c43, #2a3b66);
}
.zero {
  color: #ff4761e0;
}
.fifty {
  color: #ceaf39;
}
.hundred {
  color: #0bba74;
}
.review-btn {
  width: 49px;
  height: 57px;
  background: #830dff1c;
  border-radius: 0px 10px 10px 0px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #81abff;
  font-size: 0.9em;
  cursor: pointer;
  z-index: 10;
  box-shadow: -1px 3px 4px 0px rgba(0, 0, 0, 0.4);
  text-shadow: 1px 1px 3px #000000;
  border: solid 1px #1059e985;
}
.review-btn:hover {
  color: #cfddfa;
}
.review-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  z-index: 100;
  opacity: 0;
  transition: opacity 0.5s ease;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  pointer-events: none;
}
.review-popup.active {
  opacity: 1;
  pointer-events: auto;
}
.review-content {
  background: #191f43e3;
  border-radius: 12px;
  padding: 50px 20px 50px 20px;
  text-align: center;
  position: relative;
  width: 80%;
  max-width: 450px;
}
.review-close {
  position: absolute;
  top: 10px;
  right: 15px;
  color: #ff3333;
  font-size: 22px;
  cursor: pointer;
}
.review-german {
  font-size: 1.2em;
  color: #5fabe0;
  margin-bottom: 10px;
  direction: ltr;
}
.review-persian {
  font-size: 1em;
  color: #5c64a6;
}
.review-counter {
  position: absolute;
  top: 10px;
  left: 15px;
  color: #a3f012;
  font-size: 1em;
  margin-right: 10px;
  width: 40px;
}
.review-timer {
  position: absolute;
  top: 10px;
  left: 52px;
  color: #1673ff;
  font-size: 1em;
  margin-left: 10px;
}
.review-text {
  position: absolute;
  top: 13px;
  left: 88px;
  color: #2e77e5;
  font-size: 0.8em;
  margin-left: 10px;
  text-shadow: 1px 1px 4px rgb(0 0 0 / 96%);
}
.group-wrapper {
  display: flex;
  gap: 0px;
  align-items: center;
}
@media (max-width: 600px) {
  .container {
    width: 95%;
    max-width: 95%;
  }
  h1 {
    font-size: 1.4em;
    width: 95%;
  }
  .node {
    width: 38px;
    height: 38px;
    font-size: 0.8em;
  }
  .group-node {
    width: 100px;
    height: 50px;
    font-size: 1em;
  }
  .node-counter {
    width: 14px;
    height: 14px;
    font-size: 0.6em;
    top: -4px;
    right: -4px;
  }
  .flashcard {
    width: 80%;
    max-width: 280px;
    height: auto;
  }
  .flashcard-inner {
    height: auto;
    min-height: 250px;
  }
  .item-top .filename,
  .item-top .type {
    font-size: 0.8em;
  }
  .translate {
    font-size: 1em;
  }
  .sound-container button.play-btn {
    height: 24px;
    font-size: 0.5em;
    padding: 4px 6px;
    border-radius: 6px;
  }
  .sound-container .ctrl-bottom {
    height: 35px;
    padding: 0 5px;
  }
  .root-icon {
    font-size: 1em;
    width: 18px;
    height: 18px;
  }
  .modal-content {
    width: 85%;
    padding: 20px;
    font-size: 0.9em;
  }
  .close-button {
    font-size: 24px;
    top: 5px;
    right: 10px;
  }
  .review-btn {
    height: 50px;
  }
}
.review-progress {
  position: absolute;
  bottom: 0px;
  left: 50%;
  transform: translateX(-50%);
  width: 100%;
  height: 25px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: #090f29a6;
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
}
.review-progress-dots {
  display: flex;
  justify-content: space-between;
  width: 95%;
  position: absolute;
  pointer-events: none;
}
.review-progress-dot {
  width: 4px;
  height: 4px;
  background-color: #23415e54;
  border-radius: 50%;
  cursor: pointer;
  transition: background-color 0.3s ease;
  pointer-events: auto;
}
.review-progress-dot.active {
  background-color: #002eff;
}
.review-progress-dot:hover {
  background-color: #ceaf39;
}

    </style>
 
  </head>
  <body>
    <h1 class="header"></h1>
    <div class="container">
      <button class="back-btn">Zurück zur Hauptseite</button>
      <div class="content path-container" style="display: none">
        <div
          class="group-parent-title"
        ></div>
        <div class="box-title zero">Lernen 0%</div>
        <div id="box0" class="box"></div>
        <div class="box-title fifty">Lernen 50%</div>
        <div id="box50" class="box"></div>
        <div class="box-title hundred">Lernen 100%</div>
        <div id="box100" class="box"></div>
      </div>
      <div class="group-container">
        <div class="group-title">Gruppen</div>
        <div id="groupBox" class="group-box"></div>
      </div>
    </div>
    <div id="rootModal" class="modal">
      <div class="modal-content">
        <span class="close-button">&times;</span>
        <p id="modalRootHeader"></p>
        <p id="modalRootContent"></p>
      </div>
    </div>
    <div id="flashcardPopup" class="flashcard-popup"></div>
    <div id="reviewPopup" class="review-popup">
      <div class="review-content">
        <span class="review-close">&times;</span>
        <div id="reviewTimer" class="review-timer"></div>
        <div id="reviewCounter" class="review-counter"></div>
        <div class="review-text">Review time</div>
        <div id="reviewGerman" class="review-german"></div>
        <div id="reviewPersian" class="review-persian"></div>
        <audio id="reviewAudio" preload="none"></audio>
        <div id="reviewProgress" class="review-progress">
          <div class="review-progress-dots"></div>
        </div>
      </div>
    </div>
     <script>
        const container = document.querySelector(".container");
const rootModal = document.getElementById("rootModal");
const modalRootContent = document.getElementById("modalRootContent");
const modalRootHeader = document.getElementById("modalRootHeader");
const closeButton = document.querySelector(".close-button");
const backButton = document.querySelector(".back-btn");
const header = document.querySelector(".header");
const urlParams = new URLSearchParams(window.location.search);
const level = urlParams.get("level");
const flashcardPopup = document.getElementById("flashcardPopup");
const box0 = document.getElementById("box0");
const box50 = document.getElementById("box50");
const box100 = document.getElementById("box100");
const groupBox = document.getElementById("groupBox");
const pathContainer = document.querySelector(".path-container");
const groupContainer = document.querySelector(".group-container");
const groupParentTitle = document.querySelector(".group-parent-title");
const reviewPopup = document.getElementById("reviewPopup");
const reviewClose = document.querySelector(".review-close");
const reviewGerman = document.getElementById("reviewGerman");
const reviewPersian = document.getElementById("reviewPersian");
const reviewAudio = document.getElementById("reviewAudio");
const reviewCounter = document.getElementById("reviewCounter");
const reviewTimer = document.getElementById("reviewTimer");
const reviewProgress = document.getElementById("reviewProgress");
const reviewProgressDots = reviewProgress.querySelector(
  ".review-progress-dots"
);

const levelConfig = {
  A1_verben_II: {
    jsonFile: "../json/json-verb-II-A1.json",
    audioPath: "../audio-A1-Verben-II",
    tense: "../json/json-All-tense-verb-A1",
    headerText: "A1 Verben II",
    headerClass: "color-a1",
  },
  A2_verben_II: {
    jsonFile: "../json/json-verb-II-A2.json",
    audioPath: "../audio-A2-Verben-II",
    tense: "../json/json-All-tense-verb-A2",
    headerText: "A2 Verben II",
    headerClass: "color-a2",
  },
};

let itemsData = [];
let nodeStates = [];
let nodeViewCounts = [];
let currentGroupParent = "";

function sanitizeString(str) {
  if (!str) return "";
  return str
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;")
    .replace(/\r/g, " ")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

window.addEventListener("load", () => {
  if (level && levelConfig[level]) {
    const config = levelConfig[level];
    header.textContent = config.headerText;
    container.dataset.audioPath = config.audioPath;
    localStorage.setItem("selectedLevel", level);
    fetch(config.jsonFile)
      .then((r) => {
        if (!r.ok) throw new Error("Failed to load JSON file");
        return r.json();
      })
      .then((data) => {
        itemsData = data;
        nodeStates = new Array(itemsData.length).fill("0");
        nodeViewCounts = new Array(itemsData.length).fill(0);
        header.style.display = "block";
        backButton.style.display = "block";
        renderGroups(config.headerClass);
      })
      .catch((err) => {
        container.innerHTML = `<div class="error">خطا در بارگذاری فایل JSON: ${err.message}</div>`;
        header.style.display = "none";
        backButton.style.display = "none";
      });
  } else {
    container.innerHTML = `<div class="error">سطح نامعتبر است یا وجود ندارد</div>`;
    header.style.display = "none";
    backButton.style.display = "none";
  }
});

function renderGroups(headerClass) {
  groupContainer.style.display = "block";
  pathContainer.style.display = "none";
  backButton.textContent = "Zurück zur Hauptseite";
  groupBox.innerHTML = "";
  const uniqueParents = [
    ...new Set(itemsData.map((item) => item.parent)),
  ].filter(Boolean);
  uniqueParents.forEach((parent, i) => {
    const wrapper = document.createElement("div");
    wrapper.className = "group-wrapper";
    const groupNode = document.createElement("div");
    groupNode.className = "group-node";
    groupNode.textContent = parent;
    groupNode.dataset.groupParent = parent;
    groupNode.addEventListener("click", () => showGroup(parent));
    const reviewBtn = document.createElement("div");
    reviewBtn.className = "review-btn";
    reviewBtn.textContent = "R";
    reviewBtn.dataset.groupParent = parent;
    reviewBtn.addEventListener("click", () => showReviewSlideshow(parent));
    wrapper.appendChild(groupNode);
    wrapper.appendChild(reviewBtn);
    groupBox.appendChild(wrapper);
  });
}

function showGroup(groupParent) {
  currentGroupParent = groupParent;
  const groupItems = itemsData.filter((item) => item.parent === groupParent);
  renderPath(groupItems);
  groupParentTitle.textContent = groupParent;
  groupContainer.style.display = "none";
  pathContainer.style.display = "block";
  backButton.textContent = "Zurück zu den Gruppen";
}

function renderPath(items) {
  box0.innerHTML = "";
  box50.innerHTML = "";
  box100.innerHTML = "";
  items.forEach((item, localIndex) => {
    const globalIndex = itemsData.indexOf(item);
    const node = document.createElement("div");
    node.className = `node node-${nodeStates[globalIndex]}`;
    node.textContent = globalIndex + 1;
    node.dataset.index = globalIndex;
    const counter = document.createElement("div");
    counter.className = "node-counter";
    counter.textContent = nodeViewCounts[globalIndex];
    if (nodeViewCounts[globalIndex] > 0) {
      counter.classList.add("visible");
    }
    node.appendChild(counter);
    const targetBox = getBoxByLevel(nodeStates[globalIndex]);
    targetBox.appendChild(node);
    node.addEventListener("click", () => showFlashcardPopup(globalIndex));
  });
}

function getBoxByLevel(level) {
  if (level === "50") return box50;
  if (level === "100") return box100;
  return box0;
}

function getSoundDetails(itm) {
  if (!itm) return { soundContent: "", colorClass: "", isSentence: false };
  const mainSoundDe = (itm.Sound_de || "").trim();
  const isSentence = /[.!?,]$/.test(mainSoundDe);
  let colorClass = "";
  if (!isSentence) {
    const lower = mainSoundDe.toLowerCase();
    if (lower.startsWith("die ")) colorClass = "pink-text";
    else if (lower.startsWith("der ")) colorClass = "blue-text";
    else if (lower.startsWith("das ")) colorClass = "green-text";
  }
  let soundContent = mainSoundDe;
  if (isSentence) {
    const segments = mainSoundDe.split(" ").filter(Boolean);
    let currentIndex = 0;
    soundContent = segments
      .map((word, idx) => {
        if (idx < currentIndex) return "";
        const cleanWord = word.replace(/[.,!?:؛]/g, "").toLowerCase();
        const punctuation = (word.match(/[.,!?:؛]+$/) || [""])[0];
        const checkMultiWord = (arrCandidate, i) => {
          if (!arrCandidate)
            return { match: false, length: 1, phraseWords: [] };
          for (let itm of arrCandidate) {
            if (!itm || typeof itm !== "string") continue;
            const words = itm.split(" ");
            const phrase = segments
              .slice(i, i + words.length)
              .join(" ")
              .replace(/[.,!?:؛]/g, "")
              .toLowerCase();
            if (phrase === itm.toLowerCase())
              return {
                match: true,
                length: words.length,
                phraseWords: segments.slice(i, i + words.length),
              };
          }
          return { match: false, length: 1, phraseWords: [] };
        };
        let result = checkMultiWord(itm.subject, idx);
        if (result.match) {
          const phrase = result.phraseWords
            .map(
              (w) =>
                `${w.replace(/[.,!?:؛]/g, "")}${
                  (w.match(/[.,!?:؛]+$/) || [""])[0]
                }`
            )
            .join(" ");
          currentIndex = idx + result.length;
          return `<span class="subject">${phrase}</span>`;
        }
        result = checkMultiWord(itm.object, idx);
        if (result.match) {
          const phrase = result.phraseWords
            .map(
              (w) =>
                `${w.replace(/[.,!?:؛]/g, "")}${
                  (w.match(/[.,!?:؛]+$/) || [""])[0]
                }`
            )
            .join(" ");
          currentIndex = idx + result.length;
          return `<span class="object">${phrase}</span>`;
        }
        const clean = cleanWord;
        let cls = "";
        if (itm.auxiliary_verb?.some((a) => a?.toLowerCase() === clean))
          cls = "aux-verb";
        else if (itm.subject?.some((s) => s?.toLowerCase() === clean))
          cls = "subject";
        else if (itm.verb?.some((v) => v?.toLowerCase() === clean))
          cls = "verb";
        else if (itm.verb_part1?.some((vp) => vp?.toLowerCase() === clean))
          cls = "verb_part1";
        else if (itm.verb_part2?.some((vp) => vp?.toLowerCase() === clean))
          cls = "verb_part2";
        else if (itm.object?.some((o) => o?.toLowerCase() === clean))
          cls = "object";
        currentIndex = idx + 1;
        return `<span class="${cls}">${word.replace(
          /[.,!?:؛]/g,
          ""
        )}${punctuation}</span>`;
      })
      .filter(Boolean)
      .join(" ");
  }
  return { soundContent, colorClass, isSentence };
}

function createFlashcard(item, index, audioPath) {
  const mainItem = item;
  const itemNumber = index + 1;
  const mainSoundDetails = getSoundDetails(mainItem);
  const soundContent = mainSoundDetails.soundContent;
  const colorClass = mainSoundDetails.colorClass;
  const isSentence = mainSoundDetails.isSentence;

  const flashcardDiv = document.createElement("div");
  flashcardDiv.className = "flashcard";
  flashcardDiv.dataset.index = index;
  flashcardDiv.innerHTML = `
          <div class="flashcard-inner">
            <div class="flashcard-front">
              <div class="item-top">
                <div class="filename">${itemNumber}</div>
                <div class="tense">${mainItem.tense || ""}</div>
              </div>
              <div class="translate">${mainItem.translate_fa || ""}</div>
            </div>
            <div class="flashcard-back">
              <div class="item-top">
                <div class="filename">${itemNumber}</div>
                <div class="tense">${mainItem.tense || ""}</div>
              </div>
              ${
                mainItem.root?.trim()
                  ? `
                <div class="root-icon">!</div>
                <div class="root-icon" style="display: none;" data-root-content='${JSON.stringify(
                  {
                    root: sanitizeString(mainItem.root),
                    Sound_de: sanitizeString(mainItem.Sound_de),
                  }
                )}'></div>
              `
                  : ""
              }
              <div class="sound-container">
                <div class="sound ${isSentence ? "sentence" : ""} ${
    isSentence ? "" : colorClass
  }">${soundContent}</div>
                <div class="ctrl-bottom">
                  <audio src="${audioPath}/${
    mainItem.file || ""
  }" preload="none"></audio>
                  <button class="play-btn" type="button">
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" clip-rule="evenodd" d="M10.4 1.8C11.5532 0.262376 14 1.07799 14 3.00001V21.1214C14 23.0539 11.5313 23.8627 10.3878 22.3049L6.49356 17H4C2.34315 17 1 15.6569 1 14V10C1 8.34315 2.34315 7 4 7H6.5L10.4 1.8ZM12 3L8.1 8.2C7.72229 8.70361 7.12951 9 6.5 9H4C3.44772 9 3 9.44772 3 10V14C3 14.5523 3.44772 15 4 15H6.49356C7.13031 15 7.72901 15.3032 8.10581 15.8165L12 21.1214V3Z"/>
                      <path d="M16.2137 4.17445C16.1094 3.56451 16.5773 3 17.1961 3C17.6635 3 18.0648 3.328 18.1464 3.78824C18.4242 5.35347 19 8.96465 19 12C19 15.0353 18.4242 18.6465 18.1464 20.2118C18.0648 20.672 17.6635 21 17.1961 21C16.5773 21 16.1094 20.4355 16.2137 19.8256C16.5074 18.1073 17 14.8074 17 12C17 9.19264 16.5074 5.8927 16.2137 4.17445Z"/>
                      <path d="M21.41 5C20.7346 5 20.2402 5.69397 20.3966 6.35098C20.6758 7.52413 21 9.4379 21 12C21 14.5621 20.6758 16.4759 20.3966 17.649C20.2402 18.306 20.7346 19 21.41 19C21.7716 19 22.0974 18.7944 22.2101 18.4509C22.5034 17.5569 23 15.5233 23 12C23 8.47672 22.5034 6.44306 22.2101 5.54913C22.0974 5.20556 21.7716 5 21.41 5Z"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
        `;

  const soundDivs = flashcardDiv.querySelectorAll(".sound");
  soundDivs.forEach((soundDiv) => {
    soundDiv.addEventListener("click", (ev) => {
      ev.stopPropagation();
    });
  });

  const playButtons = flashcardDiv.querySelectorAll(".play-btn");
  playButtons.forEach((btn) => {
    btn.addEventListener("click", (ev) => {
      ev.stopPropagation();
      const audio = btn.previousElementSibling;
      audio.currentTime = 0;
      audio.play();
    });
  });

  const rootIcons = flashcardDiv.querySelectorAll(
    ".root-icon:not([style*='display: none'])"
  );

  rootIcons.forEach((icon, idx) => {
    const dataIcon = icon.nextElementSibling;
    if (dataIcon) {
      icon.addEventListener("click", (ev) => {
        ev.stopPropagation();
        try {
          const data = JSON.parse(dataIcon.dataset.rootContent || "{}");
          modalRootHeader.textContent = data.Sound_de || "";
          const rootLines = (data.root || "").split("\n");
          modalRootContent.innerHTML = rootLines
            .map((line) => {
              const isPersian = /[\u0600-\u06FF]/.test(line);
              const dir = isPersian ? "rtl" : "ltr";
              const textAlign = isPersian ? "right" : "left";
              return `<span style="display: block; direction: ${dir}; text-align: ${textAlign};">${line}</span>`;
            })
            .join("");
          rootModal.classList.add("show");
        } catch (error) {
          console.error(
            "Error parsing JSON:",
            error,
            dataIcon.dataset.rootContent
          );
          modalRootHeader.textContent = "خطا";
          modalRootContent.textContent = "داده‌های ریشه نامعتبر است.";
          rootModal.classList.add("show");
        }
      });
    }
  });

  const buttonsDiv = document.createElement("div");
  buttonsDiv.className = "selection-buttons";
  ["0", "50", "100"].forEach((lvl) => {
    const btn = document.createElement("button");
    btn.className = `selection-btn level-${lvl}`;
    btn.textContent = `${lvl}%`;
    btn.addEventListener("click", () => handleSelection(index, lvl));
    buttonsDiv.appendChild(btn);
  });
  flashcardDiv.appendChild(buttonsDiv);
  attachFlipListener(flashcardDiv);
  return flashcardDiv;
}

function showFlashcardPopup(index) {
  const audioPath = container.dataset.audioPath;
  const item = itemsData[index];
  const flashcard = createFlashcard(item, index, audioPath);
  flashcardPopup.innerHTML = "";
  flashcardPopup.appendChild(flashcard);
  flashcardPopup.style.display = "flex";
  setTimeout(() => {
    flashcardPopup.classList.add("active");
  }, 10);
}

function handleSelection(index, level) {
  nodeViewCounts[index]++;
  flashcardPopup.classList.remove("active");
  setTimeout(() => {
    flashcardPopup.style.display = "none";
    flashcardPopup.innerHTML = "";
    const node = document.querySelector(`.node[data-index="${index}"]`);
    nodeStates[index] = level;
    node.className = `node node-${level}`;
    const counter = node.querySelector(".node-counter");
    counter.textContent = nodeViewCounts[index];
    if (nodeViewCounts[index] > 0) {
      counter.classList.add("visible");
    } else {
      counter.classList.remove("visible");
    }
    const oldBox = node.parentElement;
    const newBox = getBoxByLevel(level);
    if (oldBox !== newBox) {
      const rect = node.getBoundingClientRect();
      node.style.position = "fixed";
      node.style.left = `${rect.left}px`;
      node.style.top = `${rect.top}px`;
      node.style.zIndex = "1000";
      node.style.transition =
        "left 0.5s ease, top 0.5s ease, opacity 0.5s ease";
      document.body.appendChild(node);
      const tempNode = document.createElement("div");
      tempNode.style.visibility = "hidden";
      tempNode.style.width = "36px";
      tempNode.style.height = "36px";
      newBox.appendChild(tempNode);
      const targetRect = tempNode.getBoundingClientRect();
      setTimeout(() => {
        node.style.left = `${targetRect.left}px`;
        node.style.top = `${targetRect.top}px`;
        node.style.opacity = "0.5";
      }, 10);
      setTimeout(() => {
        newBox.appendChild(node);
        newBox.removeChild(tempNode);
        node.style.position = "relative";
        node.style.left = "";
        node.style.top = "";
        node.style.opacity = "1";
        node.style.transition = "";
        node.style.zIndex = "";
      }, 600);
    } else {
      newBox.appendChild(node);
    }
  }, 500);

  setTimeout(() => {
    if (box0.children.length === 0 && box50.children.length === 0) {
      showCelebration();
      return;
    }
  }, 600);
}

function attachFlipListener(card) {
  card.addEventListener("click", (ev) => {
    if (ev.target.closest(".root-icon, .play-btn, .sound, .selection-btn"))
      return;
    card.classList.toggle("flipped");
  });
}

closeButton.addEventListener("click", () => rootModal.classList.remove("show"));
rootModal.addEventListener("click", (e) => {
  if (e.target === rootModal) rootModal.classList.remove("show");
});

backButton.addEventListener("click", () => {
  if (pathContainer.style.display === "block") {
    pathContainer.style.display = "none";
    groupContainer.style.display = "block";
    backButton.textContent = "Zurück zur Hauptseite";
  } else {
    window.location.href = "../index.html";
  }
});

function showCelebration() {
  const celebrationDiv = document.createElement("div");
  celebrationDiv.className = "celebration";
  celebrationDiv.style.fontFamily =
    '"iranyekanwebregular", Arial, Helvetica, sans-serif';
  celebrationDiv.innerHTML = `
          <h2>تبریک! 🎉</h2>
          <p>همه فلش‌کارت‌ها به 100% رسیدند!</p>
        `;
  document.body.appendChild(celebrationDiv);

  confetti({
    particleCount: 100,
    spread: 70,
    origin: { y: 0.6 },
  });

  setTimeout(() => {
    celebrationDiv.remove();
  }, 3000);
}

let currentReviewIndex = 0;
let reviewItems = [];
let reviewAudioPath = "";
let timerInterval;
let reviewDurations = [];

function formatTime(seconds) {
  const min = Math.floor(seconds / 60);
  const sec = seconds % 60;
  return `${min}:${sec < 10 ? "0" : ""}${sec}`;
}

function showReviewSlideshow(groupParent) {
  reviewItems = itemsData.filter((item) => item.parent === groupParent);
  reviewAudioPath = container.dataset.audioPath;
  let totalTime = 0;
  let loadedCount = 0;
  reviewDurations = [];
  reviewItems.forEach((item, idx) => {
    const audio = new Audio(`${reviewAudioPath}/${item.file || ""}`);
    audio.preload = "metadata";
    audio.onloadedmetadata = () => {
      const duration = audio.duration + 2;
      reviewDurations[idx] = duration;
      totalTime += duration;
      loadedCount++;
      if (loadedCount === reviewItems.length) {
        startReview(totalTime);
      }
    };
    audio.onerror = () => {
      const duration = 4;
      reviewDurations[idx] = duration;
      totalTime += duration;
      loadedCount++;
      if (loadedCount === reviewItems.length) {
        startReview(totalTime);
      }
    };
  });
}

function startReview(totalTime) {
  currentReviewIndex = 0;
  reviewPopup.style.display = "flex";
  setTimeout(() => {
    reviewPopup.classList.add("active");
    let remainingTime = Math.round(totalTime);
    reviewTimer.textContent = formatTime(remainingTime);
    timerInterval = setInterval(() => {
      remainingTime = Math.max(0, remainingTime - 1);
      reviewTimer.textContent = formatTime(remainingTime);
      if (remainingTime <= 0) clearInterval(timerInterval);
    }, 1000);
    initProgressBar();
    showNextReviewItem();
  }, 10);
}

function initProgressBar() {
  reviewProgressDots.innerHTML = "";
  reviewItems.forEach((_, idx) => {
    const dot = document.createElement("div");
    dot.className = "review-progress-dot";
    dot.dataset.index = idx;
    dot.addEventListener("click", () => jumpToReviewItem(idx));
    reviewProgressDots.appendChild(dot);
  });
  updateProgressBar();
}

function updateProgressBar() {
  const dots = reviewProgressDots.querySelectorAll(".review-progress-dot");
  dots.forEach((dot, idx) => {
    if (idx < currentReviewIndex) {
      dot.classList.add("active");
    } else {
      dot.classList.remove("active");
    }
  });
}

function recalculateRemainingTime() {
  let remainingTime = 0;
  for (let i = currentReviewIndex; i < reviewDurations.length; i++) {
    remainingTime += reviewDurations[i] || 4;
  }
  return Math.round(remainingTime);
}

function jumpToReviewItem(newIndex) {
  if (newIndex < 0 || newIndex >= reviewItems.length) return;
  reviewAudio.pause();
  currentReviewIndex = newIndex;
  clearInterval(timerInterval);
  let remainingTime = recalculateRemainingTime();
  reviewTimer.textContent = formatTime(remainingTime);
  timerInterval = setInterval(() => {
    remainingTime = Math.max(0, remainingTime - 1);
    reviewTimer.textContent = formatTime(remainingTime);
    if (remainingTime <= 0) clearInterval(timerInterval);
  }, 1000);
  showNextReviewItem();
}

function showNextReviewItem() {
  if (currentReviewIndex >= reviewItems.length) {
    closeReviewPopup();
    return;
  }

  const item = reviewItems[currentReviewIndex];
  const mainSoundDetails = getSoundDetails(item);
  reviewGerman.innerHTML = mainSoundDetails.soundContent;
  reviewPersian.textContent = item.translate_fa || "";

  reviewCounter.textContent = `${currentReviewIndex + 1}/${reviewItems.length}`;

  reviewAudio.src = `${reviewAudioPath}/${item.file || ""}`;
  reviewAudio.play();

  updateProgressBar();

  reviewAudio.onended = () => {
    setTimeout(() => {
      currentReviewIndex++;
      showNextReviewItem();
    }, 1000);
  };
}

function closeReviewPopup() {
  reviewPopup.classList.remove("active");
  clearInterval(timerInterval);
  setTimeout(() => {
    reviewPopup.style.display = "none";
    reviewAudio.pause();
    reviewAudio.src = "";
    currentReviewIndex = 0;
    reviewItems = [];
    reviewDurations = [];
    reviewProgressDots.innerHTML = "";
  }, 500);
}

reviewClose.addEventListener("click", closeReviewPopup);
reviewPopup.addEventListener("click", (e) => {
  if (e.target === reviewPopup) closeReviewPopup();
});

     </script>
  </body>
</html>


این کد من است آن را بررسی کن و بدون تغییرات کلی موارد زیر را اضافه کن : 
از متغییر  levelConfig در کلید tense یک آدرس فایل وجود دارد که اشیا مانند زیر در آن وجود دارد
{
    "Präsens": "wohnen",
    "Präteritum": "wohnten",
    "Perfekt": "haben gewohnt",
    "Plusquamperfekt": "hatten gewohnt",
    "Futur I": "werden wohnen",
    "Futur II": "werden gewohnt haben"
  }

که زمان های مربوط به هر کدام از فعل های مربوط به گروه ها است و می خواهم تمام این کلید ها به همراه محتوای آن را بصورت زیر هم در زیر div  با کلاس group-parent-title که ریشه فعل است نمایش داده شود.